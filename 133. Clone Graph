class Solution {
public:
    unordered_map<int,Node*> mp;
    void dfs(Node* node, Node* temp){
        if(node==NULL){
            return;
        }
        mp[node->val]=temp;
        for(auto i:node->neighbors){
            if(mp.find(i->val) != mp.end()){
                temp->neighbors.push_back(mp[i->val]);
            }
            else{
                Node* newn=new Node(i->val);
                temp->neighbors.push_back(newn);
                dfs(i,newn);
            }
        }
    }
    Node* cloneGraph(Node* node) {
        if(node==NULL){
            return NULL;
        }
        Node* head=new Node(node->val);
        dfs(node,head);
        return head;
    }
};
